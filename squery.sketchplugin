var sQuery, $;(function(){  sQuery = $ = function(selector) {    return new SQUERY(selector);  };    var SQUERY = function(selector) {      var foo = function(){        log("foo de squery");      };      // this      this.typename =  "psdQuery";      this.version = "1.0";      this.autor = "Francis Vega";      this.layers = [];      if (typeof selector === "string") {        switch(selector) {          case "*":            break;          case "%groups%":            break;          case "%selected%":            break;          default:            break;        }      }      // Return self object      return this;    };    /* @psdQuery API */    sQuery.fn = SQUERY.prototype = {      foo: function() {        log("foo() invocado");      },      isGroup: function(layer) {      },      isBitmap: function(layer) {      },      /* @LOOP METHODS */      /**       * Itera por cada uno de los elementos previamente seleccionados y devuelve el elemento       * @param {function} callback Una funci贸n a la que each llama por cada iteraci贸n       * @return {this} Devuelve this       */      each: function(callback) {        for(var i = 0; i < this.layers.length; ++i) {          callback.call(this.layers[i], i);        }        return this;      },      /**       * Itera por cada uno de los elementos filtrando los que devuelvan true       * @param {function} callback Una funci贸n a la que filter llama por cada iteraci贸n       * @return {this} Devuelve this       */      filter: function(callback) {        var r = [];        var k;        for(var i = 0; i < this.layers.length; ++i) {          k = callback.call(this.layers[i], i);          if (k){            r.push(this.layers[i]);          }        }        this.layers = r.slice();        return this;      },      isLocked: function(neg) {        return this;      },      childs: function() {      },      descendants: function() {        return this;      },      isEmpty: function() {      },      isHidden: function() {        return this;      },      show: function() {        return this;      },      hide: function() {        return this;      },      lock: function() {        return this;      },      unlock: function() {        return this;      },      rename: function(name) {        return this;      },      duplicate: function(name) {        return this;      },      remove: function() {        return this;      },      visible: function(val) {        return this;      },      opacity: function(val) {        return this;      },      addGroup: function(name) {        return this;      },      addTextLayer: function(userInput) {        return this;      }    };  })();